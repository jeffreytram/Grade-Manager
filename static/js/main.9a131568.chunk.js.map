{"version":3,"sources":["Grade.js","GradeList.js","Class.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Grade","props","data","name","weight","score","id","placeholder","type","value","onChange","event","handleChange","className","onClick","deleteGrade","GradeList","gradeList","map","grade","key","Class","classGrade","forEach","addGrade","classID","classKey","gradeKey","Form","state","classList","currClass","addClass","bind","deleteClass","this","setState","prevState","length","newList","nextClassIndex","findNextClass","filter","cls","i","arr","currIndex","indexOf","push","gradeID","target","index","updatedList","updatedClassList","setActiveIndex","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9a131568.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Grade.css\"\r\n\r\nexport default function Grade(props) {\r\n  const { name, weight, score, id } = props.data\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input\r\n\t\t\t\tname=\"name\"\r\n\t\t\t\tplaceholder=\"Name\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={name}\r\n\t\t\t\tonChange={(event) => props.handleChange(event, id)}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\tname=\"weight\"\r\n\t\t\t\tplaceholder=\"Weight\"\r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tvalue={weight}\r\n\t\t\t\tonChange={(event) => props.handleChange(event, id)}\r\n\t\t\t/>\r\n\t\t\t<input\r\n\t\t\t\tname=\"score\"\r\n\t\t\t\tplaceholder=\"Score\"\r\n\t\t\t\ttype=\"number\"\r\n\t\t\t\tvalue={score}\r\n\t\t\t\tonChange={(event) => props.handleChange(event, id)}\r\n\t\t\t/>\r\n\t\t\t<button className=\"component-delete-btn\" onClick={() => props.deleteGrade(id)}>Delete</button>\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport Grade from \"./Grade\"\r\nimport \"./GradeList.css\"\r\n\r\nexport default function GradeList(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t\t{props.gradeList.map(grade => {\r\n\t\t\t\t\treturn <Grade\r\n\t\t\t\t\t\tdata={grade}\r\n\t\t\t\t\t\tdeleteGrade={props.deleteGrade}\r\n\t\t\t\t\t\thandleChange={props.handleChange}\r\n            key={grade.id}\r\n\t\t\t\t\t/>\r\n\t\t\t\t})}\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport GradeList from \"./GradeList\"\r\nimport \"./Class.css\"\r\n\r\nexport default function Class(props) {\r\n\tconst { id, name, gradeList } = props.data\r\n\r\n\tlet classGrade = 0\r\n\tgradeList.forEach(grade => classGrade += grade.weight * grade.score)\r\n\r\n\treturn (\r\n\t\t<div className=\"component-class-container\">\r\n\t\t\t<input\r\n        className=\"component-class-name\"\r\n\t\t\t\tname=\"className\"\r\n\t\t\t\tplaceholder=\"Class Name\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={name}\r\n\t\t\t\tonChange={(event) => props.handleChange(event, id)}\r\n\t\t\t/>\r\n      <br /> <br />\r\n      <button className=\"component-add-grade-btn\" onClick={props.addGrade}>Add Grade</button>\r\n      <p>Grade: {classGrade}</p>\r\n\t\t\t<GradeList\r\n\t\t\t\tclassID={id}\r\n\t\t\t\tgradeList={gradeList}\r\n\t\t\t\tdeleteGrade={props.deleteGrade}\r\n\t\t\t\thandleChange={props.handleChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t)\r\n}","import React from \"react\";\r\nimport Class from \"./Class\"\r\nimport \"./Form.css\"\r\n\r\nlet classKey = 0\r\nlet gradeKey = 0\r\nexport default class Form extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      classList: [],\r\n      currClass: 0\r\n    }\r\n    this.addClass = this.addClass.bind(this)\r\n    this.deleteClass = this.deleteClass.bind(this)\r\n    this.addGrade = this.addGrade.bind(this)\r\n    this.deleteGrade = this.deleteGrade.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n\r\n  addClass() {\r\n    this.setState(prevState => {\r\n      return {\r\n        classList: [...prevState.classList, { id: classKey++, name: \"\", gradeList: [] }],\r\n        currClass: prevState.classList.length\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteClass() {\r\n    const newList = [...this.state.classList]\r\n    const currClass = this.state.currClass\r\n    this.setState(prevState => {\r\n      const nextClassIndex = this.findNextClass(prevState.classList, currClass)\r\n      return {\r\n        classList: newList.filter((cls, i) => i !== currClass),\r\n        currClass: nextClassIndex\r\n      }\r\n    })\r\n  }\r\n\r\n  findNextClass(arr, currIndex) {\r\n    if (currIndex < arr.length - 1) {\r\n      return currIndex\r\n    } else if (currIndex > 0) {\r\n      return currIndex - 1\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  setActiveIndex(classID) {\r\n    this.setState(prevState => {\r\n      const classIDs = prevState.classList.map(cls => cls.id)\r\n      return {\r\n        currClass: classIDs.indexOf(classID)\r\n      }\r\n    })\r\n  }\r\n\r\n  addGrade() {\r\n    this.setState(prevState => {\r\n      const newList = [...prevState.classList]\r\n      newList[prevState.currClass].gradeList.push({ id: gradeKey++, name: \"\", weight: \"\", score: \"\" })\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteGrade(gradeID) {\r\n    this.setState(prevState => {\r\n      const newList = [...prevState.classList]\r\n      newList[prevState.currClass].gradeList = newList[prevState.currClass].gradeList.filter(grade => grade.id !== gradeID)\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  handleChange(event, gradeID) {\r\n    const { name, value } = event.target\r\n    if (name === \"className\") {\r\n      //change name based on id\r\n      this.setState(prevState => {\r\n        const index = prevState.currClass\r\n        const updatedList = prevState.classList\r\n        updatedList[index].name = value\r\n        return {\r\n          classList: updatedList\r\n        }\r\n      })\r\n    } else {\r\n      this.setState(prevState => {\r\n        const updatedClassList = prevState.classList\r\n        const index = prevState.currClass\r\n        updatedClassList[index].gradeList = updatedClassList[index].gradeList.map(grade => {\r\n          if (grade.id !== gradeID) {\r\n            return grade\r\n          } else {\r\n            return {\r\n              ...grade,\r\n              [name]: value\r\n            }\r\n          }\r\n        })\r\n        return {\r\n          classList: updatedClassList\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button className=\"component-btn add\" onClick={this.addClass}>Add class</button>\r\n        <button className=\"component-btn delete\" onClick={this.deleteClass}>Delete current class</button>\r\n        <br /> <br />\r\n        <div className=\"component-flex-container\">\r\n          {this.state.classList.map(cls => {\r\n            let className = cls.name\r\n            if (className === \"\") {\r\n              className = \"Class \" + (cls.id + 1)\r\n            }\r\n            return (\r\n              <button\r\n                className={(this.state.classList[this.state.currClass].id === cls.id) ? \"component-class-tab active\" : \"component-class-tab\"}\r\n                onClick={() => this.setActiveIndex(cls.id)}>\r\n                {className}\r\n              </button>\r\n            )\r\n          })}\r\n        </div>\r\n        <br /> <br />\r\n        {(this.state.classList.length !== 0) ?\r\n          <Class\r\n            data={this.state.classList[this.state.currClass]}\r\n            addGrade={this.addGrade}\r\n            deleteGrade={this.deleteGrade}\r\n            handleChange={this.handleChange}\r\n          />\r\n          :\r\n          <h4>Add a class to get started!</h4>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import React from \"react\";\r\nimport Form from \"./Form\"\r\nimport \"./App.css\"\r\n\r\nexport default function App(props) {\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<h2>Grade Manager</h2>\r\n\t\t\t<Form />\r\n\t\t</div>\r\n\t)\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}