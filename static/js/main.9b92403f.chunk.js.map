{"version":3,"sources":["Grade.js","GradeList.js","Section.js","Class.js","ClassTab.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Grade","props","data","name","score","id","className","placeholder","type","value","onChange","event","handleChange","sectionID","onClick","deleteGrade","GradeList","gradeList","map","grade","key","Section","sectionName","sectionWeight","sectionGrade","color","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","addGrade","deleteSection","toFixed","Class","classGrade","sectionList","addSection","onDragEnd","result","destination","source","newSectionList","reorder","updateSectionList","droppableId","droppableProps","section","ClassTab","handleTabClick","data-tip","deleteClass","effect","Form","state","classList","currClass","classKey","addClass","bind","setActiveIndex","JSON","parse","localStorage","getItem","parseInt","this","setState","setItem","stringify","prevState","sectionKey","length","classID","newList","nextClassIndex","currentID","findNextClass","filter","cls","push","gradeKey","forEach","arr","currIndex","target","indexOf","totalWeight","weight","gradeID","calcSectionGrade","updatedList","updatedClassList","getClassIndex","newClassList","list","srcIndex","destIndex","splice","removed","i","direction","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9b92403f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Grade.css\"\r\n\r\nexport default function Grade(props) {\r\n  const { name, score, id } = props.data\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"component-grade-input text\"\r\n        name=\"name\"\r\n        placeholder=\"Name\"\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={(event) => props.handleChange(event, props.sectionID, id)}\r\n      />\r\n      <input\r\n        className=\"component-grade-input num\"\r\n        name=\"score\"\r\n        placeholder=\"Grade\"\r\n        type=\"number\"\r\n        value={score}\r\n        onChange={(event) => props.handleChange(event, props.sectionID, id)}\r\n      />\r\n      <button className=\"component-delete-grade-btn\" onClick={() => props.deleteGrade(props.sectionID, id)}>Delete</button>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport Grade from \"./Grade\"\r\nimport \"./GradeList.css\"\r\n\r\nexport default function GradeList(props) {\r\n  const { id, gradeList } = props.data\r\n  return (\r\n    <div className=\"component-grade-list\">\r\n      {gradeList.map(grade => {\r\n        return <Grade\r\n          data={grade}\r\n          sectionID={id}\r\n          deleteGrade={props.deleteGrade}\r\n          handleChange={props.handleChange}\r\n          key={grade.id}\r\n        />\r\n      })}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport GradeList from \"./GradeList\"\r\nimport \"./Section.css\"\r\nimport { Draggable } from 'react-beautiful-dnd'\r\n\r\nexport default function Section(props) {\r\n  const { id, sectionName, sectionWeight, sectionGrade } = props.data\r\n  const colorList = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\"]\r\n  let color = colorList[id % 5]\r\n  return (\r\n    <Draggable draggableId={id.toString()} index={props.index}>\r\n      {(provided) => (\r\n        <div className={\"component-section-container \" + color}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <button className=\"component-add-grade-btn\" onClick={() => props.addGrade(id)}>Add Grade</button>\r\n          <button className=\"component-delete-section-btn\" onClick={() => props.deleteSection(id)}>X</button>\r\n          <input\r\n            className=\"component-section-input\"\r\n            name=\"sectionName\"\r\n            placeholder=\"Section Name\"\r\n            type=\"text\"\r\n            value={sectionName}\r\n            onChange={(event) => props.handleChange(event, id)}\r\n          />\r\n          <input\r\n            className=\"component-section-input num\"\r\n            name=\"sectionWeight\"\r\n            placeholder=\"Weight\"\r\n            type=\"number\"\r\n            value={sectionWeight}\r\n            onChange={(event) => props.handleChange(event, id)}\r\n          />\r\n          <span className=\"component-section-grade\">{sectionGrade.toFixed(2)}</span>\r\n          <GradeList\r\n            data={props.data}\r\n            deleteGrade={props.deleteGrade}\r\n            handleChange={props.handleChange}\r\n          />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  )\r\n}","import React from \"react\";\r\nimport Section from \"./Section\"\r\nimport \"./Class.css\"\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\n\r\nexport default function Class(props) {\r\n  const { id, name, classGrade, sectionList } = props.data\r\n\r\n  function onDragEnd(result) {\r\n    if (!result.destination) {\r\n      return\r\n    }\r\n    if (result.destination.index === result.source.index) {\r\n      return\r\n    }\r\n    const newSectionList = props.reorder(sectionList, result.source.index, result.destination.index)\r\n    props.updateSectionList(id, newSectionList)\r\n  }\r\n\r\n  return (\r\n    <div className=\"component-class-container\">\r\n      <div className=\"component-class-content-container\">\r\n        <input\r\n          className=\"component-class-name\"\r\n          name=\"className\"\r\n          placeholder=\"Class Name\"\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(event) => props.handleChange(event, id)}\r\n        />\r\n        <span className=\"component-class-grade\">Class Grade: {classGrade.toFixed(2)}</span>\r\n        <br /> <br />\r\n        <button className=\"component-add-section-btn\" onClick={props.addSection}>Add Section</button>\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n          <Droppable droppableId={id.toString()}>\r\n            {(provided) => (\r\n              <div\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n              >\r\n                {sectionList.map((section, index) => {\r\n                  return <Section\r\n                    key={section.id}\r\n                    data={section}\r\n                    deleteSection={props.deleteSection}\r\n                    addGrade={props.addGrade}\r\n                    deleteGrade={props.deleteGrade}\r\n                    handleChange={props.handleChange}\r\n                    index={index}\r\n                  />\r\n                })}\r\n                {provided.placeholder}\r\n              </div>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport \"./ClassTab.css\"\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport ReactTooltip from 'react-tooltip'\r\n\r\nexport default function ClassTab(props) {\r\n  return (\r\n    <Draggable draggableId={props.id.toString()} index={props.index}>\r\n      {(provided) => (\r\n        <div\r\n          className={props.className}\r\n          onClick={(event) => props.handleTabClick(event, props.id)}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n        >\r\n          <span data-tip={props.name + \": \" + props.grade}>\r\n            <div className=\"component-class-tab-name\">{props.name}</div>\r\n            <div\r\n              className=\"component-delete-class-btn\"\r\n              onClick={() => props.deleteClass(props.id)}\r\n            >\r\n              X\r\n          </div>\r\n          </span>\r\n          <ReactTooltip effect=\"solid\"/>\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  )\r\n}","import React from \"react\";\r\nimport Class from \"./Class\"\r\nimport ClassTab from \"./ClassTab\"\r\nimport \"./Form.css\"\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\n\r\nexport default class Form extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      classList: [],\r\n      currClass: 0,\r\n      classKey: 0\r\n    }\r\n    this.addClass = this.addClass.bind(this)\r\n    this.deleteClass = this.deleteClass.bind(this)\r\n    this.addSection = this.addSection.bind(this)\r\n    this.deleteSection = this.deleteSection.bind(this)\r\n    this.handleTabClick = this.handleTabClick.bind(this)\r\n    this.setActiveIndex = this.setActiveIndex.bind(this)\r\n    this.addGrade = this.addGrade.bind(this)\r\n    this.deleteGrade = this.deleteGrade.bind(this)\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.updateSectionList = this.updateSectionList.bind(this)\r\n    this.onDragEnd = this.onDragEnd.bind(this)\r\n    this.reorder = this.reorder.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    //retrieve local storage if found\r\n    const classList = JSON.parse(localStorage.getItem('classList'))\r\n    const currClass = localStorage.getItem('currClass')\r\n    const classKey = parseInt(localStorage.getItem('classKey'))\r\n    if (classList !== null) {\r\n      this.setState({ classList, currClass, classKey })\r\n    } else {\r\n      this.addClass()\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //save to local storage\r\n    const { classList, currClass, classKey } = this.state\r\n    localStorage.setItem('classList', JSON.stringify(classList))\r\n    localStorage.setItem('currClass', currClass)\r\n    localStorage.setItem('classKey', classKey)\r\n  }\r\n\r\n  /**\r\n   * Adds a new class to the class list\r\n   */\r\n  addClass() {\r\n    this.setState(prevState => {\r\n      return {\r\n        classList: [...prevState.classList, { id: prevState.classKey, name: \"\", sectionList: [], sectionKey: 0, classGrade: 100 }],\r\n        currClass: prevState.classList.length,\r\n        classKey: prevState.classKey + 1\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Deletes the class with the given classID from the classList\r\n   * @param {Number} classID the ID of the class to delete \r\n   */\r\n  deleteClass(classID) {\r\n    this.setState(prevState => {\r\n      let newList = prevState.classList\r\n      let nextClassIndex = prevState.currClass\r\n      const currentID = prevState.classList[prevState.currClass].id\r\n      if (currentID === classID) {\r\n        nextClassIndex = this.findNextClass(prevState.classList, prevState.currClass)\r\n      } else if (currentID > classID) {\r\n        nextClassIndex--\r\n      }\r\n      return {\r\n        classList: newList.filter(cls => cls.id !== classID),\r\n        currClass: nextClassIndex\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds a new section to the sectionList of the current class\r\n   */\r\n  addSection() {\r\n    this.setState(prevState => {\r\n      const newList = [...prevState.classList]\r\n      let sectionKey = newList[prevState.currClass].sectionKey++\r\n      newList[prevState.currClass].sectionList.push({ id: sectionKey, sectionName: \"\", sectionWeight: \"\", sectionGrade: 100, gradeList: [], gradeKey: 0 })\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Deletes the section with the given sectionID in the current class\r\n   * @param {Number} sectionID the ID of the section to delete\r\n   */\r\n  deleteSection(sectionID) {\r\n    this.setState(prevState => {\r\n      const newList = [...prevState.classList]\r\n      newList[prevState.currClass].sectionList = newList[prevState.currClass].sectionList.filter(section => section.id !== sectionID)\r\n\r\n      let classGrade = 0\r\n      newList[prevState.currClass].sectionList.forEach(section => classGrade += section.sectionWeight * section.sectionGrade / 100)\r\n      newList[prevState.currClass].classGrade = classGrade\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Gets the index of the next class after the current class is deleted\r\n   * Prioritizes right neighboring class before left\r\n   * @param {Array} arr the class list\r\n   * @param {Number} currIndex the index of the current class \r\n   */\r\n  findNextClass(arr, currIndex) {\r\n    if (currIndex < arr.length - 1) {\r\n      return currIndex\r\n    } else if (currIndex > 0) {\r\n      return currIndex - 1\r\n    } else {\r\n      return 0\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the event of a class tab click\r\n   * @param {Object} event the event\r\n   * @param {Number} classID the class ID of the tab clicked\r\n   */\r\n  handleTabClick(event, classID) {\r\n    if (event.target.className !== \"component-delete-class-btn\") {\r\n      this.setActiveIndex(classID)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the current class index to the index of the class with the given class ID\r\n   * @param {Number} classID the class ID of the class to set as the current class\r\n   */\r\n  setActiveIndex(classID) {\r\n    this.setState(prevState => {\r\n      const classIDs = prevState.classList.map(cls => cls.id)\r\n      return {\r\n        currClass: classIDs.indexOf(classID)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Calculates the section grade given a list of grades\r\n   * @param {Array} gradeList the list of grades\r\n   */\r\n  calcSectionGrade(gradeList) {\r\n    let sectionGrade = 0\r\n    let totalWeight = 0\r\n\r\n    gradeList.forEach(grade => {\r\n      grade.weight = 1 / gradeList.length\r\n      if (grade.score !== \"\") {\r\n        sectionGrade += grade.weight * grade.score\r\n        totalWeight += grade.weight\r\n      }\r\n    })\r\n    if (totalWeight === 0) {\r\n      return 100\r\n    }\r\n    sectionGrade = sectionGrade / totalWeight\r\n    return sectionGrade\r\n  }\r\n\r\n  /**\r\n   * Adds a grade to the section with the given section ID in the current class\r\n   * @param {Number} sectionID the section ID of the section to add the grade to\r\n   */\r\n  addGrade(sectionID) {\r\n    this.setState(prevState => {\r\n      const newList = [...prevState.classList]\r\n      newList[prevState.currClass].sectionList.map(section => {\r\n        if (section.id !== sectionID) {\r\n          return section\r\n        } else {\r\n          const gradeKey = section.gradeKey\r\n          section.gradeList.push({ id: gradeKey, name: \"\", weight: \"\", score: \"\" })\r\n          section.gradeKey++\r\n          return section\r\n        }\r\n      })\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Deletes the grade with the given grade ID in the section with the given section ID\r\n   * @param {*} sectionID the section ID of the section that contains the grade to delete\r\n   * @param {*} gradeID the grade ID of the grade to delete\r\n   */\r\n  deleteGrade(sectionID, gradeID) {\r\n    this.setState(prevState => {\r\n      const newList = [...prevState.classList]\r\n      newList[prevState.currClass].sectionList.map(section => {\r\n        if (section.id !== sectionID) {\r\n          return section\r\n        } else {\r\n          section.gradeList = section.gradeList.filter(grade => grade.id !== gradeID)\r\n          section.sectionGrade = this.calcSectionGrade(section.gradeList)\r\n          return section\r\n        }\r\n      })\r\n      let classGrade = 0\r\n      newList[prevState.currClass].sectionList.forEach(section => classGrade += section.sectionWeight * section.sectionGrade / 100)\r\n      newList[prevState.currClass].classGrade = classGrade\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Handles the change of class, section, and grade info\r\n   * @param {Object} event the event\r\n   * @param {Number} sectionID the ID of the section the event occurs in\r\n   * @param {Number} gradeID the ID of the grade the event occurs in\r\n   */\r\n  handleChange(event, sectionID, gradeID) {\r\n    const { name, value } = event.target\r\n    if (name === \"className\") {\r\n      //handles class name change\r\n      this.setState(prevState => {\r\n        const index = prevState.currClass\r\n        const updatedList = prevState.classList\r\n        updatedList[index].name = value\r\n        return {\r\n          classList: updatedList\r\n        }\r\n      })\r\n    } else if (name === \"sectionName\" || name === \"sectionWeight\") {\r\n      //handles section name and weight change\r\n      this.setState(prevState => {\r\n        const index = prevState.currClass\r\n        const updatedList = prevState.classList\r\n\r\n        let classGrade = 0\r\n\r\n        updatedList[index].sectionList.map(section => {\r\n          if (section.id !== sectionID) {\r\n            classGrade += section.sectionWeight * section.sectionGrade / 100\r\n            return section\r\n          } else {\r\n            section[name] = value\r\n            classGrade += section.sectionWeight * section.sectionGrade / 100\r\n            return section\r\n          }\r\n        })\r\n        updatedList[index].classGrade = classGrade\r\n        return {\r\n          classList: updatedList\r\n        }\r\n      })\r\n    } else {\r\n      //handles grade name and grade value change\r\n      this.setState(prevState => {\r\n        const updatedClassList = prevState.classList\r\n        const index = prevState.currClass\r\n\r\n        let classGrade = 0\r\n        updatedClassList[index].sectionList = updatedClassList[index].sectionList.map(section => {\r\n          if (section.id !== sectionID) {\r\n            classGrade += section.sectionWeight * section.sectionGrade / 100\r\n            return section\r\n          } else {\r\n            section.gradeList = section.gradeList.map(grade => {\r\n              if (grade.id !== gradeID) {\r\n                return grade\r\n              } else {\r\n                return {\r\n                  ...grade,\r\n                  [name]: value\r\n                }\r\n              }\r\n            })\r\n            section.sectionGrade = this.calcSectionGrade(section.gradeList)\r\n            classGrade += section.sectionWeight * section.sectionGrade / 100\r\n            return section\r\n          }\r\n        })\r\n        updatedClassList[index].classGrade = classGrade\r\n        return {\r\n          classList: updatedClassList\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the section list of the class with the given class ID with the provided new section list\r\n   * @param {*} classID the ID of the class to update the section list of\r\n   * @param {*} newSectionList the new section list to replace the old one with\r\n   */\r\n  updateSectionList(classID, newSectionList) {\r\n    this.setState(prevState => {\r\n      let newList = [...prevState.classList]\r\n      let clsIndex = this.getClassIndex(classID)\r\n      newList[clsIndex].sectionList = newSectionList\r\n      return {\r\n        classList: newList\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * handles the drag end of class tabs\r\n   * @param {Object} result the result of the drag\r\n   */\r\n  onDragEnd(result) {\r\n    if (!result.destination) {\r\n      return\r\n    }\r\n    if (result.destination.index === result.source.index) {\r\n      return\r\n    }\r\n    const newClassList = this.reorder(this.state.classList, result.source.index, result.destination.index)\r\n    this.setState({ classList: newClassList })\r\n    this.setActiveIndex(parseInt(result.draggableId))\r\n  }\r\n\r\n  /**\r\n   * Moves the item at srcIndex to destIndex in the given list\r\n   * @param {*} list the list to reorder\r\n   * @param {*} srcIndex the index of the item to move\r\n   * @param {*} destIndex the index of the destination\r\n   */\r\n  reorder(list, srcIndex, destIndex) {\r\n    const [removed] = list.splice(srcIndex, 1)\r\n    list.splice(destIndex, 0, removed)\r\n    return list\r\n  }\r\n\r\n  /**\r\n   * Returns the index of the class given the class ID\r\n   * @param {Number} classID the ID of the class to get the index of\r\n   */\r\n  getClassIndex(classID) {\r\n    const classList = this.state.classList\r\n    for (let i = 0; i < classList.length; i++) {\r\n      if (classList[i].id === classID) {\r\n        return i\r\n      }\r\n    }\r\n    return -1\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <DragDropContext onDragEnd={this.onDragEnd}>\r\n            <Droppable droppableId=\"0\" direction=\"horizontal\">\r\n              {(provided) => (\r\n                <div\r\n                  className=\"component-flex-container\"\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                >\r\n                  {this.state.classList.map((cls, index) => {\r\n                    let className = cls.name\r\n                    if (className === \"\") {\r\n                      className = \"New class\"\r\n                    }\r\n                    return (\r\n                      <ClassTab\r\n                        key={cls.id}\r\n                        id={cls.id}\r\n                        index={index}\r\n                        name={className}\r\n                        grade={cls.classGrade}\r\n                        className={(this.state.classList[this.state.currClass].id === cls.id) ? \"component-class-tab active-tab\" : \"component-class-tab\"}\r\n                        handleTabClick={this.handleTabClick}\r\n                        deleteClass={this.deleteClass}\r\n                      />\r\n                    )\r\n                  })}\r\n                  {provided.placeholder}\r\n                  <button className=\"component-add-class-btn\" onClick={this.addClass}>+</button>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        {(this.state.classList.length !== 0) ?\r\n          <Class\r\n            data={this.state.classList[this.state.currClass]}\r\n            addSection={this.addSection}\r\n            deleteSection={this.deleteSection}\r\n            addGrade={this.addGrade}\r\n            deleteGrade={this.deleteGrade}\r\n            handleChange={this.handleChange}\r\n            updateSectionList={this.updateSectionList}\r\n            reorder={this.reorder}\r\n          />\r\n          :\r\n          <h4>Click the \"+\" to add a class!</h4>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import React from \"react\";\r\nimport Form from \"./Form\"\r\nimport \"./App.css\"\r\n\r\nexport default function App(props) {\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<h2>Grade Manager</h2>\r\n\t\t\t<Form />\r\n\t\t</div>\r\n\t)\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}